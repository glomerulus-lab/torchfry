for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
for (j in 1:nrow(matrix)) {
set <- unname(matrix[j,])
print(set)
confidence.intervals <- lapply(set, function(x) {
# call Monte Carlo resampling.
if (length(x) == 1) {
return(c(0,0)) # Handle case when data is a single element
}
non.parametric.bootstrap(x)
})
print(confidence.intervals)
}
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
confidence.intervals <- lapply(set, function(x) {
# call Monte Carlo resampling.
if (length(x) == 1) {
return(c(0,0)) # Handle case when data is a single element
}
non.parametric.bootstrap(x)
})
print(confidence.intervals)
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
confidence.intervals <- lapply(matrix, function(x) {
# call Monte Carlo resampling.
if (length(x) == 1) {
return(c(0,0)) # Handle case when data is a single element
}
non.parametric.bootstrap(x)
})
print(confidence.intervals)
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
confidence.intervals <- lapply(matrix, function(x) {
# call Monte Carlo resampling.
print(x)
if (length(x) == 1) {
return(c(0,0)) # Handle case when data is a single element
}
non.parametric.bootstrap(x)
})
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
print(vect)
}
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
print(vect)
}
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
print(vect)
}
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
CI <- non.parametric.bootstrap(vect)
print(CI)
}
}
non.parametric.bootstrap <- function(population, B=10000, alpha=0.05) {
# Non-Parametric Percentile Bootstrap
n = length(population)
resample = sample(population, size = B*n, replace = TRUE)
resample = matrix(resample, nrow = B)
mc.mean = rowMeans(resample)
grand.mean = mean(mc.mean)
mc.variance = mean((mc.mean - grand.mean)^2)
percentiles = quantile(mc.mean, probs = c(alpha/2, 1 - alpha/2))
c(percentiles[1], percentiles[2])
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
CI <- non.parametric.bootstrap(vect)
print(CI)
}
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
trial.ci = c()
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
CI <- non.parametric.bootstrap(vect)
trial.ci = c(trial.ci, as.numeric(CI))
}
print(trial.ci)
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
trial.ci = c()
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
CI <- non.parametric.bootstrap(vect)
trial.ci = c(trial.ci, as.numeric(CI))
}
print(matrix(trial.ci, nrow=2))
}
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
trial.ci = c()
for (j in 1:nrow(matrix)) {
vect <- matrix[,j]
CI <- non.parametric.bootstrap(vect)
trial.ci = c(trial.ci, as.numeric(CI))
print(CI)
}
print(matrix(trial.ci, nrow=2))
}
header_lines
rm(list = ls())
# Load data
setwd("C:/J/fastfood")
library(bootstrap)
library(jsonlite)
filename = "testing_performance/Wednesday_plots/extracted_data.csv"
data <- readLines(filename)  # Read file as text
# Find header lines
header_lines <- grep("^#", data)
matrices <- list()
names <- list()
# Process each matrix
for (i in seq_along(header_lines)) {
start <- header_lines[i] + 1  # Start after header
end <- if (i < length(header_lines)) header_lines[i + 1] - 1 else length(data)  # End before next header or EOF
# Read the matrix data
matrix_data <- read.csv(text = paste(data[start:end], collapse = "\n"), header = FALSE)
matrices[[i]] <- as.matrix(matrix_data)
# Read the matrix name
matrix_name <- read.csv(text = paste(data[header_lines[i]], collapse = "\n"), header = FALSE)
names[[i]] <- matrix_name
}
names
storage = c()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
print(matrix)
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
storage = c(storage, matrix(trial.CI, nrow=2))
}
non.parametric.bootstrap <- function(population, B=10000, alpha=0.05) {
# Non-Parametric Percentile Bootstrap
n = length(population)
resample = sample(population, size = B*n, replace = TRUE)
resample = matrix(resample, nrow = B)
mc.mean = rowMeans(resample)
grand.mean = mean(mc.mean)
mc.variance = mean((mc.mean - grand.mean)^2)
percentiles = quantile(mc.mean, probs = c(alpha/2, 1 - alpha/2))
c(percentiles[1], percentiles[2])
}
storage = c()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
storage = c(storage, matrix(trial.CI, nrow=2))
}
print(storage)
storage = c()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
print(trial.CI)
}
storage = c()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
print(trial.CI)
print("")
}
storage = c()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
print(trial.CI)
print("")
}
storage = c()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
print(CI)
}
trial.CI <- matrix(trial.CI, nrow=2)
print(trial.CI)
print("")
}
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
print(trial.CI)
print("")
}
storage = list()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
storage <- c(storage, list(names[i] = trial.CI))
names[1]
typeof(names[1])
typeof(names[[1]])
names[[1]]
names
data <- readLines(filename)  # Read file as text
# Find header lines
header_lines <- grep("^#", data)
matrices <- list()
names <- list()
# Process each matrix
for (i in seq_along(header_lines)) {
start <- header_lines[i] + 1  # Start after header
end <- if (i < length(header_lines)) header_lines[i + 1] - 1 else length(data)  # End before next header or EOF
# Read the matrix data
matrix_data <- read.csv(text = paste(data[start:end], collapse = "\n"), header = FALSE)
matrices[[i]] <- as.matrix(matrix_data)
# Read the matrix name
matrix_name <- read.csv(text = paste(data[header_lines[i]], collapse = "\n"), header = FALSE)
names[[i]] <- matrix_name
}
names <- sapply(names, function(x) x$V1)
names
names[1]
storage = list()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
storage <- c(storage, list(names[i] = trial.CI))
names[1]
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
print(trial.CI)
}
names
# Load data
setwd("C:/J/fastfood")
library(bootstrap)
library(jsonlite)
filename = "testing_performance/Wednesday_plots/extracted_data.csv"
data <- readLines(filename)  # Read file as text
# Find header lines
header_lines <- grep("^#", data)
matrices <- list()
names <- list()
# Process each matrix
for (i in seq_along(header_lines)) {
start <- header_lines[i] + 1  # Start after header
end <- if (i < length(header_lines)) header_lines[i + 1] - 1 else length(data)  # End before next header or EOF
# Read the matrix data
matrix_data <- read.csv(text = paste(data[start:end], collapse = "\n"), header = FALSE)
matrices[[i]] <- as.matrix(matrix_data)
# Read the matrix name
matrix_name <- read.csv(text = paste(data[header_lines[i]], collapse = "\n"), header = FALSE)
names[[i]] <- matrix_name
}
names <- sapply(names, function(x) x$V1)
storage = list()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
filename <- gsub("^# |\\.pkl$", "", names[[i]])
write.csv(trial.CI, file = filename, row.names=FALSE)
}
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
filename <- paste0(gsub("^# |Wednesday_plots|\\.pkl$", "", names[[i]]), "CI/", ".csv")
write.csv(trial.CI, file = filename, row.names=FALSE, col.names=F)
}
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
base_name <- gsub("^# |Wednesday_plots|\\.pkl$", "", names[[i]])
filename <- paste0(gsub("\\\\", "/", base_name), "CI/", ".csv")
print(filename)
# write.csv(trial.CI, file = filename, row.names=FALSE, col.names=F)
}
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
filename <- paste0(gsub("^# |\\.pkl$", "", names[[i]]), ".csv")
print(filename)
# write.csv(trial.CI, file = filename, row.names=FALSE, col.names=F)
}
rm(list = ls())
non.parametric.bootstrap <- function(population, B=10000, alpha=0.05) {
# Non-Parametric Percentile Bootstrap
n = length(population)
resample = sample(population, size = B*n, replace = TRUE)
resample = matrix(resample, nrow = B)
mc.mean = rowMeans(resample)
grand.mean = mean(mc.mean)
mc.variance = mean((mc.mean - grand.mean)^2)
percentiles = quantile(mc.mean, probs = c(alpha/2, 1 - alpha/2))
c(percentiles[1], percentiles[2])
}
# Load data
setwd("C:/J/fastfood")
library(bootstrap)
library(jsonlite)
filename = "testing_performance/Wednesday_plots/extracted_data.csv"
data <- readLines(filename)  # Read file as text
# Find header lines
header_lines <- grep("^#", data)
matrices <- list()
names <- list()
# Process each matrix
for (i in seq_along(header_lines)) {
start <- header_lines[i] + 1  # Start after header
end <- if (i < length(header_lines)) header_lines[i + 1] - 1 else length(data)  # End before next header or EOF
# Read the matrix data
matrix_data <- read.csv(text = paste(data[start:end], collapse = "\n"), header = FALSE)
matrices[[i]] <- as.matrix(matrix_data)
# Read the matrix name
matrix_name <- read.csv(text = paste(data[header_lines[i]], collapse = "\n"), header = FALSE)
names[[i]] <- matrix_name
}
names <- sapply(names, function(x) x$V1)
storage = list()
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
filename <- paste0(gsub("^# |\\.pkl$", "", names[[i]]), ".csv")
print(filename)
write.csv(trial.CI, file = filename, row.names=FALSE, col.names=F)
}
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
trial.CI = c(trial.CI, as.numeric(CI))
}
trial.CI <- matrix(trial.CI, nrow=2)
filename <- paste0(gsub("^# |\\.pkl$", "", names[[i]]), ".csv")
print(filename)
write.csv(trial.CI, file = filename, row.names=FALSE)
}
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
sample.mean <- mean(vect)
inner.data = c(sample.mean, as.numeric(CI))
print(inner.data)
}
}
# Iterate matrices
for (i in 1:length(matrices)) {
matrix <- matrices[[i]]
trial.CI = c()
# Iterate trials
for (j in 1:nrow(matrix)) {
vect <- matrix[j,]
CI <- non.parametric.bootstrap(vect)
sample.mean <- mean(vect)
inner.data = c(sample.mean, as.numeric(CI))
trial.CI = c(trial.CI, inner.data)
}
trial.CI <- matrix(trial.CI, nrow=3)
filename <- paste0(gsub("^# |\\.pkl$", "", names[[i]]), ".csv")
print(filename)
write.csv(trial.CI, file = filename, row.names=FALSE)
}
